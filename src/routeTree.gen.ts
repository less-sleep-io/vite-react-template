/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as DocsRouteImport } from './routes/docs/route'
import { Route as IndexImport } from './routes/index'
import { Route as PokemonIndexImport } from './routes/pokemon.index'
import { Route as DocsIndexImport } from './routes/docs/index'
import { Route as PokemonPokemonNameImport } from './routes/pokemon.$pokemonName'
import { Route as DocsRoutingImport } from './routes/docs/routing'

// Create/Update Routes

const DocsRouteRoute = DocsRouteImport.update({
  id: '/docs',
  path: '/docs',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const PokemonIndexRoute = PokemonIndexImport.update({
  id: '/pokemon/',
  path: '/pokemon/',
  getParentRoute: () => rootRoute,
} as any)

const DocsIndexRoute = DocsIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DocsRouteRoute,
} as any)

const PokemonPokemonNameRoute = PokemonPokemonNameImport.update({
  id: '/pokemon/$pokemonName',
  path: '/pokemon/$pokemonName',
  getParentRoute: () => rootRoute,
} as any)

const DocsRoutingRoute = DocsRoutingImport.update({
  id: '/routing',
  path: '/routing',
  getParentRoute: () => DocsRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/docs': {
      id: '/docs'
      path: '/docs'
      fullPath: '/docs'
      preLoaderRoute: typeof DocsRouteImport
      parentRoute: typeof rootRoute
    }
    '/docs/routing': {
      id: '/docs/routing'
      path: '/routing'
      fullPath: '/docs/routing'
      preLoaderRoute: typeof DocsRoutingImport
      parentRoute: typeof DocsRouteImport
    }
    '/pokemon/$pokemonName': {
      id: '/pokemon/$pokemonName'
      path: '/pokemon/$pokemonName'
      fullPath: '/pokemon/$pokemonName'
      preLoaderRoute: typeof PokemonPokemonNameImport
      parentRoute: typeof rootRoute
    }
    '/docs/': {
      id: '/docs/'
      path: '/'
      fullPath: '/docs/'
      preLoaderRoute: typeof DocsIndexImport
      parentRoute: typeof DocsRouteImport
    }
    '/pokemon/': {
      id: '/pokemon/'
      path: '/pokemon'
      fullPath: '/pokemon'
      preLoaderRoute: typeof PokemonIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

interface DocsRouteRouteChildren {
  DocsRoutingRoute: typeof DocsRoutingRoute
  DocsIndexRoute: typeof DocsIndexRoute
}

const DocsRouteRouteChildren: DocsRouteRouteChildren = {
  DocsRoutingRoute: DocsRoutingRoute,
  DocsIndexRoute: DocsIndexRoute,
}

const DocsRouteRouteWithChildren = DocsRouteRoute._addFileChildren(
  DocsRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/docs': typeof DocsRouteRouteWithChildren
  '/docs/routing': typeof DocsRoutingRoute
  '/pokemon/$pokemonName': typeof PokemonPokemonNameRoute
  '/docs/': typeof DocsIndexRoute
  '/pokemon': typeof PokemonIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/docs/routing': typeof DocsRoutingRoute
  '/pokemon/$pokemonName': typeof PokemonPokemonNameRoute
  '/docs': typeof DocsIndexRoute
  '/pokemon': typeof PokemonIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/docs': typeof DocsRouteRouteWithChildren
  '/docs/routing': typeof DocsRoutingRoute
  '/pokemon/$pokemonName': typeof PokemonPokemonNameRoute
  '/docs/': typeof DocsIndexRoute
  '/pokemon/': typeof PokemonIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/docs'
    | '/docs/routing'
    | '/pokemon/$pokemonName'
    | '/docs/'
    | '/pokemon'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/docs/routing' | '/pokemon/$pokemonName' | '/docs' | '/pokemon'
  id:
    | '__root__'
    | '/'
    | '/docs'
    | '/docs/routing'
    | '/pokemon/$pokemonName'
    | '/docs/'
    | '/pokemon/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DocsRouteRoute: typeof DocsRouteRouteWithChildren
  PokemonPokemonNameRoute: typeof PokemonPokemonNameRoute
  PokemonIndexRoute: typeof PokemonIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DocsRouteRoute: DocsRouteRouteWithChildren,
  PokemonPokemonNameRoute: PokemonPokemonNameRoute,
  PokemonIndexRoute: PokemonIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/docs",
        "/pokemon/$pokemonName",
        "/pokemon/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/docs": {
      "filePath": "docs/route.tsx",
      "children": [
        "/docs/routing",
        "/docs/"
      ]
    },
    "/docs/routing": {
      "filePath": "docs/routing.tsx",
      "parent": "/docs"
    },
    "/pokemon/$pokemonName": {
      "filePath": "pokemon.$pokemonName.tsx"
    },
    "/docs/": {
      "filePath": "docs/index.tsx",
      "parent": "/docs"
    },
    "/pokemon/": {
      "filePath": "pokemon.index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
